---
// BoatJumpCalculator.astro
---

<div class="boat-jump-calculator">
  <h3>ðŸš¤ Boat Jump Calculator</h3>
  <p class="calculator-description">
    Calculate the precise timing for boat jumps in Qui'lon boss fight. This calculator handles steps after noting down the initial timer.
  </p>
  
  <div class="calculator-form">
    <div class="input-group">
      <label for="initialTime">Initial Time (seconds):</label>
      <input 
        type="number" 
        id="initialTime" 
        step="0.1" 
        placeholder="e.g., 65.5"
        min="0"
      />
      <small>The exact timer value when boat info appears + 1 frame</small>
    </div>

    <div class="input-group">
      <label for="framesToChange">Frames to Change:</label>
      <select id="framesToChange">
        <option value="">Select frames...</option>
        <option value="1">1 frame advance</option>
        <option value="2">2 frame advances</option>
        <option value="3">3 frame advances</option>
      </select>
      <small>How many frame advances until the timer changes</small>
    </div>

    <div class="input-group">
      <label>Relics:</label>
      <div class="checkbox-group">
        <label class="checkbox-label">
          <input type="checkbox" id="painfulHappiness" class="relic-checkbox" />
          <img src="/guides/is5-sarkaz/images/collectibles/rogue_4_relic_legacy_178.png" alt="Example" width="25" height="25">
          <span>Painful Happiness (-15% MSPD)</span>
        </label>
        <label class="checkbox-label">
          <input type="checkbox" id="rollingAncestors" class="relic-checkbox" />
          <img src="/guides/is5-sarkaz/images/collectibles/rogue_4_relic_explore_7.png" alt="Example" width="25" height="25">
          <span>Rolling Ancestors (+30% MSPD)</span>
        </label>
      </div>
    </div>

    <div class="input-group">
      <label for="protractionStacks" class="label-with-image">
        <img src="/guides/is5-sarkaz/images/collectibles/rogue_4_relic_book_4.png" alt="Example" width="25" height="25">
        Protraction Book Stacks:
      </label>
      <input 
        type="number" 
        id="protractionStacks" 
        min="0" 
        max="20"
        value="0"
        placeholder="0"
      />
      <small>Each stack: -5% MSPD (additive with itself, multiplicative with other effects)</small>
      <label for="operatorLoaded" class="label-with-image">
        <img src="/guides/is5-sarkaz/boat-jump-calculator/boat.png" alt="Example" width="25" height="25">
        <span>Operator loaded at frame x from boat spawn (-50% MSPD)</span>
        </label>
        <input 
        type="number" 
        id="operatorLoaded" 
        min="0" 
        max="500"
        value="0"
        placeholder="0"
      />
      <small>Leave this at 0 if no operator is loaded, otherwise specify the frame in which an operator is loaded into the boat from the boat spawn frame</small>
    </div>

    <button id="calculateBtn" class="calculate-button">Calculate Jump Timing</button>

    <div id="results" class="results-section" style="display: none;">
      <h4>Results:</h4>
      <div class="result-item">
        <strong>Initial Timer:</strong>
        <span class="value"><span id="initialTimer"></span> seconds</span>
      </div>
      <div class="result-item">
        <strong>Final MSPD Multiplier:</strong>
        <span class="value"><span id="speedMultiplier"></span> x</span>
      </div>
      <div class="result-item">
        <strong>Final MSPD:</strong>
        <span class="value"><span id="finalMSPD"></span> tiles/s</span>
      </div>
      <div class="result-item">
        <strong>&#916;Time:</strong>
        <span class="value"><span id="timeDelta"></span> seconds (<span id="timeDeltaFrames"></span> frames)</span>
      </div>
      <div class="result-item highlight">
        <strong>Jump Timer:</strong>
        <span class="value"><span id="jumpTimer"></span> seconds</span>
      </div>
      <!-- <div class="result-item highlight">
        <strong>Skill Press Frame:</strong> <span id="jumpFrame"></span>
      </div> -->
      <div class="jump-instruction">
        <p>ðŸŽ¯ <strong>When to Jump:</strong> When the timer changes to <strong><span id="jumpTimerDisplay"></span></strong> seconds, advance <strong><span id="jumpFrameDisplay"></span></strong> frames, then activate Mon3tr's skill</p>
      </div>
    </div>

    <div id="error" class="error-message" style="display: none;"></div>
  </div>
</div>

<style>
  .boat-jump-calculator {
    background: var(--sl-color-bg-nav);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 12px;
    padding: 0;
    margin: 2rem 0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    overflow: hidden;
  }

  .boat-jump-calculator h3 {
    margin: 0;
    padding: 1rem 1.5rem;
    font-size: 1.25rem;
    background: linear-gradient(135deg, #FBC02D 0%, #F57C00 100%);
    color: #000;
    font-weight: 700;
    border-bottom: 2px solid #F57C00;
  }

  .calculator-description {
    padding: 1rem 1.5rem;
    margin: 0;
    background: var(--sl-color-bg);
    border-bottom: 1px solid var(--sl-color-gray-6);
    font-size: 0.9rem;
    color: var(--sl-color-text);
  }

  .calculator-form {
    background: var(--sl-color-bg);
    padding: 1.5rem;
    color: var(--sl-color-text);
  }

  .input-group {
    margin-bottom: 1.5rem;
  }

  .input-group label {
    display: block;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--sl-color-text);
  }

  .input-group input[type="number"],
  .input-group select {
    width: 100%;
    padding: 0.75rem;
    background: var(--sl-color-gray-6);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 6px;
    font-size: 1rem;
    color: var(--sl-color-text);
    transition: all 0.2s;
  }

  .input-group input[type="number"]:focus,
  .input-group select:focus {
    outline: none;
    border-color: #FBC02D;
    background: var(--sl-color-gray-5);
  }

  .input-group small {
    display: block;
    margin-top: 0.25rem;
    color: var(--sl-color-text-subtle);
    font-size: 0.85rem;
  }

  .label-with-image {
    display: flex;
    align-items: center;
    gap: 0.4rem;
  }

  .label-with-image img {
    display: inline-block;
    vertical-align: middle;
    margin: 0 0.3rem;
  }

  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-weight: normal;
  }

  .checkbox-label img {
    display: inline-block;
    vertical-align: middle;
    margin: 0 0.3rem;
  }

  .checkbox-label input[type="checkbox"] {
    vertical-align: middle;
    width: 18px;
    height: 18px;
    cursor: pointer;
  }

  .calculate-button {
    width: 100%;
    padding: 1rem;
    background: linear-gradient(135deg, #FBC02D 0%, #F57C00 100%);
    color: #000;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .calculate-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(251, 192, 45, 0.4);
    background: linear-gradient(135deg, #FDD835 0%, #FB8C00 100%);
  }

  .calculate-button:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .results-section {
    margin-top: 1.5rem;
    padding: 1.5rem;
    background: var(--sl-color-gray-6);
    border-radius: 8px;
    border: 2px solid #FBC02D;
  }

  .results-section h4 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--sl-color-text);
    font-weight: 700;
  }

  .result-item {
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: var(--sl-color-gray-5);
    border-radius: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: var(--sl-color-text);
  }

  .result-item .value {
  display: inline-flex;
  align-items: center;
  text-align: right;
  gap: 0.25rem;
}

  .result-item.highlight {
    background: rgba(251, 192, 45, 0.15);
    border: 2px solid #FBC02D;
    font-size: 1.1rem;
  }

  .jump-instruction {
    margin-top: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #2e7d32 0%, #1b5e20 100%);
    color: white;
    border-radius: 6px;
    text-align: center;
    border: 2px solid #43a047;
  }

  .jump-instruction p {
    margin: 0;
  }

  .error-message {
    margin-top: 1rem;
    padding: 1rem;
    background: rgba(220, 38, 38, 0.15);
    color: #ef4444;
    border-radius: 6px;
    border: 2px solid #dc2626;
  }

  @media (max-width: 768px) {
    .boat-jump-calculator h3 {
      padding: 0.875rem 1.25rem;
      font-size: 1.125rem;
    }

    .calculator-description {
      padding: 0.875rem 1.25rem;
      font-size: 0.85rem;
    }

    .calculator-form {
      padding: 1.25rem;
    }

    .result-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }
  }
</style>

<script>
  const FPS = 30; // Game runs at 30 FPS

  function calculateBoatJump() {
    // Get input values
    const initialTimeInput = document.getElementById('initialTime') as HTMLInputElement | null;
    const framesToChangeInput = document.getElementById('framesToChange') as HTMLSelectElement | null;
    const protractionStacksInput = document.getElementById('protractionStacks') as HTMLInputElement | null;
    const operatorLoadedInput = document.getElementById('operatorLoaded') as HTMLInputElement | null;

    if (!initialTimeInput || !framesToChangeInput || !protractionStacksInput || !operatorLoadedInput) return;

    const initialTime = parseFloat(initialTimeInput.value);
    const framesToChange = parseInt(framesToChangeInput.value);
    const protractionStacks = parseInt(protractionStacksInput.value) || 0;
    const operatorLoadedFrames = parseInt(operatorLoadedInput.value) || 0;

    // Validation
    if (isNaN(initialTime) || initialTime <= 0) {
      showError('Please enter a valid initial time.');
      return;
    }

    if (!framesToChange || framesToChange < 1 || framesToChange > 3) {
      showError('Please select the number of frames to change (1-3).');
      return;
    }

    if (protractionStacks < 0 || protractionStacks > 20) {
      showError('Protraction stacks must be between 0 and 20.');
      return;
    }

    // Calculate actual frame based on frames to change
    const actualFrame = framesToChange - 1; // 1â†’0, 2â†’1, 3â†’2
    const initialTimer = initialTime + actualFrame * 1/30

    // Calculate movement speed multiplier (multiplicative)
    let speedMultiplier = 1.0;

    // Check selected relics
    const painfulHappinessInput = document.getElementById('painfulHappiness') as HTMLInputElement | null;
    const rollingAncestorsInput = document.getElementById('rollingAncestors') as HTMLInputElement | null;

    if (painfulHappinessInput?.checked) {
      speedMultiplier *= 0.85; // -15% speed
    }
    if (rollingAncestorsInput?.checked) {
      speedMultiplier *= 1.30; // +30% speed
    }
    
    // Apply protraction stacks (each stack -5% speed, additive within protraction, then multiplicative)
    const protractionMultiplier = 1 - (protractionStacks * 0.05); // Additive: 2 stacks = 1 - 0.10 = 0.90
    speedMultiplier *= protractionMultiplier;
    const finalMSPD = 0.4 * speedMultiplier

    // Calculate time delta using the formula: (408.75 / MSPD) + 284.75
    // This formula accounts for boat travel mechanics in Arknights
    let timeDeltaFrames = Math.ceil((408.75 / speedMultiplier) + 304.75);
    

    // If operator loaded:
    if (operatorLoadedFrames != 0) {
      timeDeltaFrames = (timeDeltaFrames - operatorLoadedFrames) * (Math.max(finalMSPD, 0.05)/Math.max((finalMSPD/2), 0.05)) + operatorLoadedFrames
    }

    timeDeltaFrames -= 21
    
    const timeDelta = (timeDeltaFrames) / FPS;
    

    // Calculate jump timing
    // Formula: jump_time = initial_time - time_delta + (actual_frame / FPS)
    const jumpTimeSeconds = initialTime - timeDelta + (actualFrame / FPS);
    
    // For practical use: show exact timing
    const exactTime = Math.floor(jumpTimeSeconds * 10) / 10; // Round down to previous 0.1 second

    // Gets the final jump timer frame e.g. for 65.566 the frame would be 0.066 -> 2 frames
    const currentFrame = Math.round((jumpTimeSeconds - exactTime) * 30)
    const framesToAdvance = 2 - currentFrame // Calculate frames to advance based on the current frame to jump at

    // When timer changes DOWN, you're at frame 2 of that second
    // We need to advance to reach the target frame (actualFrame for exact timing)
    // const framesToAdvance = 2 - actualFrame; // Calculate frames to advance based on actualFrame
    
    // Show the frame to advance to (actual frame)
    // const jumpFrame = actualFrame;

    // Display results
    const initialTimerEl = document.getElementById('initialTimer');
    const finalMSPDEl = document.getElementById('finalMSPD');
    // const actualFrameEl = document.getElementById('actualFrame');
    const speedMultiplierEl = document.getElementById('speedMultiplier');
    const timeDeltaEl = document.getElementById('timeDelta');
    const timeDeltaFramesEl = document.getElementById('timeDeltaFrames');
    const jumpTimerEl = document.getElementById('jumpTimer');
    // const jumpFrameEl = document.getElementById('jumpFrame');
    const jumpTimerDisplayEl = document.getElementById('jumpTimerDisplay');
    const jumpFrameDisplayEl = document.getElementById('jumpFrameDisplay');
    const resultsEl = document.getElementById('results');
    const errorEl = document.getElementById('error');

    if (initialTimerEl) initialTimerEl.textContent = initialTimer.toFixed(3);
    if (finalMSPDEl) finalMSPDEl.textContent = finalMSPD.toFixed(3);
    // if (actualFrameEl) actualFrameEl.textContent = String(actualFrame);
    if (speedMultiplierEl) speedMultiplierEl.textContent = speedMultiplier.toFixed(4);
    if (timeDeltaEl) timeDeltaEl.textContent = timeDelta.toFixed(3);
    if (timeDeltaFramesEl) timeDeltaFramesEl.textContent = Math.round(timeDeltaFrames).toString();
    if (jumpTimerEl) jumpTimerEl.textContent = jumpTimeSeconds.toFixed(3);
    // if (jumpFrameEl) jumpFrameEl.textContent = String(jumpFrame);
    if (jumpTimerDisplayEl) jumpTimerDisplayEl.textContent = exactTime.toFixed(1);
    if (jumpFrameDisplayEl) jumpFrameDisplayEl.textContent = String(framesToAdvance);

    // Show results, hide error
    if (resultsEl) resultsEl.style.display = 'block';
    if (errorEl) errorEl.style.display = 'none';
  }

  function showError(message: string) {
    const errorDiv = document.getElementById('error');
    const resultsEl = document.getElementById('results');
    
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.style.display = 'block';
    }
    if (resultsEl) {
      resultsEl.style.display = 'none';
    }
  }

  // Add event listener when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const calculateBtn = document.getElementById('calculateBtn');
    if (calculateBtn) {
      calculateBtn.addEventListener('click', calculateBoatJump);
    }

    // Also allow Enter key to calculate
    const inputs = document.querySelectorAll('.calculator-form input');
    inputs.forEach(input => {
      input.addEventListener('keypress', (e: Event) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'Enter') {
          calculateBoatJump();
        }
      });
    });
  });
</script>
